---
title: "Data Visualization"
subtitle: "The Grammar of Graphics with `ggplot2`"
author:
  - name: Andrew Mitchell
    orcid: 0000-0003-0978-5046
    email: a.j.mitchell@ucl.ac.uk
    affiliations: Lecturer in AI and Machine Learning for Sustainable Construction
institute: University College London
date: last-modified
# bibliography: refs.bib

format: 
  live-revealjs: 
    theme: [default, clean.scss]
    slide-number: true
    show-slide-number: all
    progress: true
    transition: slide
    background-transition: fade
    preview-links: auto
    width: 1247
    height: 810
    scrollable: true

engine: knitr

webr:
  cell-options:
    autorun: false
    fig-width: 10
    fig-height: 5
  render-df: gt-interactive
  packages:
    - dplyr
    - tidyr
    - knitr
    - ggplot2
    - ggthemes
    - palmerpenguins
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}

## Introduction^[This presentation is based on the [Data Visualization](https://r4ds.had.co.nz/data-visualisation.html) chapter of the [R for Data Science](https://r4ds.had.co.nz/) book by Hadley Wickham and Garrett Grolemund.]

```{webr setup}
#| include: false
#| autorun: true

library(ggplot2)
library(dplyr)
library(tidyr)
library(palmerpenguins)
library(ggthemes)
```

> "The simple graph has brought more information to the data analyst's mind than any other device." — John Tukey

R has several systems for making graphs, but `ggplot2` is one of the most elegant and most versatile. 

`ggplot2` implements the *grammar of graphics*, a coherent system for describing and building graphs. With `ggplot2`, you can do more and faster by learning one system and applying it in many places.

---

In this tutorial, we will create this plot:

```{webr}
#| echo: false
#| autorun: true
intro_p <- penguins |>
  drop_na() |> 
  ggplot(mapping = aes(x = flipper_length_mm, 
                       y = body_mass_g)) +
    geom_point(mapping = aes(color = species, 
                             shape = species)) +
    geom_smooth(method = "lm", formula = y ~ x) +
    labs(title = "Body Mass and Flipper Length",
         subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
         x = "Flipper Length (mm)", 
         y = "Body Mass (g)",
         color = "Species", 
         shape = "Species")

intro_p
```

## Getting Started

We begin by loading the `tidyverse` and `ggplot2` packages:

```{webr}
#| label: getting-started
#| eval: false
library(ggplot2)
library(tidyverse)
```

\
We almost always begin our work by loading the tidyverse package. Note that the terms “package” and “library” are used interchangeably but that there is no package() function. To load a package, you need to use library().

## Loading Data

Load the `palmerpenguins` package using library(). 

This package contains the `penguins` dataset, which we will use for this tutorial.

```{webr}
#| autorun: true
library(palmerpenguins)
```

## Getting help

If you are unsure about how to use a function, you can use the `?` operator to get help. 

For a data package like `palmerpenguins`, you can use `?penguins` to get help on the dataset.

```{webr}
?penguins
```

## Formulating our Research Question(s)

::: {.incremental}
- Do penguins with longer flippers weigh more or less than penguins with shorter flippers? You probably already have an answer, but try to make your answer precise. 
- What does the relationship between flipper length and body mass look like? Is it positive? Negative? Linear? Nonlinear? 
- Does the relationship vary by the species of the penguin? How about by the island where the penguin lives?
:::

## Look at the data

Type `penguins` to see the data.

```{webr}
#| label: data-preview
penguins
```

Tabular data is a set of values, each associated with a variable and an observation. Tabular data is tidy if each value is placed in its own “cell”, each variable in its own column, and each observation in its own row. `penguins` is tabular data.

## Look at the data

We can also use the `glimpse()` function to get a quick overview of the data.

```{webr}
#| label: data-glimpse
glimpse(penguins)
```

Among the variables in penguins are:

- `species`: a penguin’s species (Adelie, Chinstrap, or Gentoo).
- `flipper_length_mm`: length of a penguin’s flipper, in millimeters.
- `body_mass_g`: body mass of a penguin, in grams.

## Building up a plot
### Creating a ggplot 

With **ggplot2**, you begin a plot with the function `ggplot()`, defining a plot object that you then add layers to. \

The first argument of `ggplot()` is the dataset to use in the graph and so `ggplot(data = penguins)` creates an empty graph that is primed to display the penguins data, but since we haven't told it how to visualize it yet, for now it's empty. \

```{webr}
#| label: empty-plot

```

::: {.notes}
input `ggplot(data = penguins)`
:::

## Building up a plot
### Aesthetic mappings

This is not a very exciting plot, but you can think of it like an empty canvas you'll paint the remaining layers of your plot onto. \

Next, we need to tell `ggplot()` how the information from our data will be visually represented. The mapping argument of the `ggplot()` function defines how variables in your dataset are mapped to visual properties (**aesthetics**) of your plot. \

The mapping argument is always defined in the `aes()` function, and the `x` and `y` arguments of `aes()` specify which variables to map to the `x` and `y` axes. \

For now, we will only map flipper length to the `x` aesthetic and body mass to the `y` aesthetic. **ggplot2** looks for the mapped variables in the `data` argument, in this case, `penguins`.

## Building up a plot
### Aesthetic mappings

```{webr}
#| label: aesthetic-mappings
#| autorun: false
ggplot(
  data = penguins,
  mapping = ______________________
)
```

::: {.notes}
add `mapping = aes(x = flipper_length_mm, y = body_mass_g)`

Our empty canvas now has more structure -- it's clear where flipper lengths will be displayed (on the x-axis) and where body masses will be displayed (on the y-axis). But the penguins themselves are not yet on the plot. This is because we have not yet articulated, in our code, how to represent the observations from our data frame on our plot.
:::

## Building up a plot
### Adding layers

We need to define a **geom**: the geometrical object that a plot uses to represent data. These geometric objects are made available in **ggplot2** with functions that start with `geom_`. \

People often describe plots by the type of geom that the plot uses:

- bar charts use bar geoms (`geom_bar()`), 
- line charts use line geoms (`geom_line()`), 
- boxplots use boxplot geoms (`geom_boxplot()`), 
- scatterplots use point geoms (`geom_point()`), and so on.

The function `geom_point()` adds a **layer** of points to your plot, which creates a scatterplot. 

## Building up a plot
### Adding layers

```{webr}
#| label: geom-point
#| fig-alt: |
#|   A scatterplot of flipper length (x-axis) and body mass (y-axis) for penguins. The plot
#|   displays a positive, linear, and relative strong relationship between these two variables.

ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
)

```

::: {.notes}
add `+ geom_point()`

Now we have a scatterplot of flipper length (x-axis) and body mass (y-axis) for penguins. The plot displays a positive, linear, and relative strong relationship between these two variables.

Before we add more layers to this plot, let's pause for a moment and review the warning message we got:

We're seeing this message because there are two penguins in our dataset with missing body mass and/or flipper length values and ggplot2 has no way of representing them on the plot without both of these values. Like R, ggplot2 subscribes to the philosophy that missing values should never silently go missing. This type of warning is probably one of the most common types of warnings you will see when working with real data -- missing values are a very common issue and you'll learn more about them throughout the book, particularly in @sec-missing-values. For the remaining plots in this chapter we will suppress this warning so it's not printed alongside every single plot we make.

:::

## Continue...