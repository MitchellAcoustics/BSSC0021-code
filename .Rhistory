summary(lm_result)
# Compare the t-values
cat("t-value from t.test:", round(t_test_result$statistic, 3), "\n")
cat("t-value from lm:", round(summary(lm_result)$coefficients[1, 3], 3), "\n")
# Create data for plotting
ggplot(hr_data, aes(x = 1, y = salarygrade)) +
geom_jitter(width = 0.2, alpha = 0.3, color = "steelblue") +
geom_hline(yintercept = mean(hr_data$salarygrade), color = "darkred", linewidth = 1) +
geom_hline(yintercept = 30, color = "darkgreen", linewidth = 1, linetype = "dashed") +
annotate("text", x = 1.3, y = mean(hr_data$salarygrade) + 2,
label = paste("Sample Mean =", round(mean(hr_data$salarygrade), 2)), color = "darkred") +
annotate("text", x = 1.3, y = 30 - 2,
label = "Test Value = 30", color = "darkgreen") +
theme_minimal() +
labs(title = "One-sample t-test as Linear Model",
subtitle = "Testing if mean salary grade equals 30",
x = "",
y = "Salary Grade") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
# Create data for plotting
ggplot(hr_data, aes(x = 1, y = tenure)) +
geom_jitter(width = 0.2, alpha = 0.3, color = "steelblue") +
geom_hline(yintercept = mean(hr_data$tenure), color = "darkred", linewidth = 1) +
geom_hline(yintercept = 3.5, color = "darkgreen", linewidth = 1, linetype = "dashed") +
annotate("text", x = 1.3, y = mean(hr_data$tenure) + .5,
label = paste("Sample Mean =", round(mean(hr_data$tenure), 2)), color = "darkred") +
annotate("text", x = 1.3, y = 3.5 - .5,
label = "Test Value = 3.5", color = "darkgreen") +
theme_minimal() +
labs(title = "One-sample t-test as Linear Model",
subtitle = "Testing if mean tenure equals 3.5",
x = "",
y = "Tenure") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
# Create data for plotting
ggplot(hr_data, aes(x = 1, y = tenure)) +
geom_jitter(width = 0.2, alpha = 0.3, color = "steelblue") +
geom_hline(yintercept = mean(hr_data$tenure), color = "darkred", linewidth = 1) +
geom_hline(yintercept = 3.5, color = "darkgreen", linewidth = 1, linetype = "dashed") +
annotate("text", x = 1.3, y = mean(hr_data$tenure) + .75,
label = paste("Sample Mean =", round(mean(hr_data$tenure), 2)), color = "darkred") +
annotate("text", x = 1.3, y = 3.5 - .75,
label = "Test Value = 3.5", color = "darkgreen") +
theme_minimal() +
labs(title = "One-sample t-test as Linear Model",
subtitle = "Testing if mean tenure equals 3.5",
x = "",
y = "Tenure") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
# Create data for plotting
ggplot(hr_data, aes(x = 1, y = tenure)) +
geom_jitter(width = 0.2, alpha = 0.3, color = "steelblue") +
geom_hline(yintercept = mean(hr_data$tenure), color = "darkred", linewidth = 1) +
geom_hline(yintercept = 3.5, color = "darkgreen", linewidth = 1, linetype = "dashed") +
annotate("text", x = 1.0, y = mean(hr_data$tenure) + .75,
label = paste("Sample Mean =", round(mean(hr_data$tenure), 2)), color = "darkred") +
annotate("text", x = 1.0, y = 3.5 - .75,
label = "Test Value = 3.5", color = "darkgreen") +
theme_minimal() +
labs(title = "One-sample t-test as Linear Model",
subtitle = "Testing if mean tenure equals 3.5",
x = "",
y = "Tenure") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
#| message: false
#| warning: false
# Load required packages
library(tidyverse)    # For data manipulation and visualization
library(haven)        # For reading SPSS data
library(ggplot2)      # For creating visualizations
library(knitr)        # For formatting tables
library(janitor)      # For cleaning variable names
library(patchwork)    # For combining plots
library(broom)        # For tidy model output
library(gtsummary)    # For nice summary tables
# Set common options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.width = 7,
fig.height = 5
)
# For reproducibility
set.seed(123)
# Load HR Analytics dataset
hr_data <- read_sav("data/dataset-abc-insurance-hr-data.sav") %>%
janitor::clean_names()
# Take a look at the first few rows
head(hr_data)
# Convert categorical variables to factors with meaningful labels
hr_data <- hr_data %>%
mutate(
ethnicity = factor(ethnicity,
levels = 0:4,
labels = c("White", "Black", "Asian", "Latino", "Other")),
gender = factor(gender,
levels = 1:2,
labels = c("Female", "Male")),
job_role = factor(job_role,
levels = 0:9,
labels = c("Administration", "Customer Service", "Finance",
"Human Resources", "IT", "Marketing",
"Operations", "Sales", "Research", "Executive"))
)
# Check the structure of the data after transformation
glimpse(hr_data)
# Get summary statistics for numeric variables
hr_data %>%
select(age, tenure, salarygrade, evaluation, job_satisfaction, intention_to_quit) %>%
summary()
# Get summary statistics for numeric variables
hr_data %>%
select(age, tenure, salarygrade, evaluation, job_satisfaction, intentionto_quit) %>%
summary()
# Create visualizations of key variables
p1 <- ggplot(hr_data, aes(x = gender, fill = gender)) +
geom_bar() +
scale_fill_manual(values = c("Female" = "#FF9999", "Male" = "#6699CC")) +
theme_minimal() +
labs(title = "Gender Distribution") +
theme(legend.position = "none")
p2 <- ggplot(hr_data, aes(x = tenure)) +
geom_histogram(bins = 10, fill = "steelblue") +
theme_minimal() +
labs(title = "Years of Experience",
x = "Tenure (years)",
y = "Count")
p3 <- ggplot(hr_data, aes(x = evaluation)) +
geom_histogram(bins = 5, fill = "darkgreen") +
theme_minimal() +
labs(title = "Performance Rating Distribution",
x = "Evaluation Score (1-5)",
y = "Count")
p4 <- ggplot(hr_data, aes(x = salarygrade)) +
geom_histogram(bins = 10, fill = "darkred") +
theme_minimal() +
labs(title = "Salary Grade Distribution",
x = "Salary Grade",
y = "Count")
# Combine the plots using patchwork
(p1 + p2) / (p3 + p4)
# Get summary statistics for numeric variables
hr_data %>%
select(age, tenure, salarygrade, evaluation, job_satisfaction, intentionto_quit) %>%
summary()
# Create visualizations of key variables
p1 <- ggplot(hr_data, aes(x = gender, fill = gender)) +
geom_bar() +
scale_fill_manual(values = c("Female" = "#FF9999", "Male" = "#6699CC")) +
theme_minimal() +
labs(title = "Gender Distribution") +
theme(legend.position = "none")
p2 <- ggplot(hr_data, aes(x = tenure)) +
geom_histogram(bins = 10, fill = "steelblue") +
theme_minimal() +
labs(title = "Years of Experience",
x = "Tenure (years)",
y = "Count")
p3 <- ggplot(hr_data, aes(x = evaluation)) +
geom_histogram(bins = 5, fill = "darkgreen") +
theme_minimal() +
labs(title = "Performance Rating Distribution",
x = "Evaluation Score (1-5)",
y = "Count")
p4 <- ggplot(hr_data, aes(x = salarygrade)) +
geom_histogram(bins = 5, fill = "darkred") +
theme_minimal() +
labs(title = "Salary Grade Distribution",
x = "Salary Grade",
y = "Count")
# Combine the plots using patchwork
(p1 + p2) / (p3 + p4)
#| message: false
#| warning: false
# Load required packages
library(tidyverse)    # For data manipulation and visualization
library(haven)        # For reading SPSS data
library(ggplot2)      # For creating visualizations
library(knitr)        # For formatting tables
library(janitor)      # For cleaning variable names
library(patchwork)    # For combining plots
library(broom)        # For tidy model output
library(gtsummary)    # For nice summary tables
# Set common options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.width = 7,
fig.height = 5
)
# For reproducibility
set.seed(123)
# Load HR Analytics dataset
hr_data <- read_sav("data/dataset-abc-insurance-hr-data.sav") %>%
janitor::clean_names()
# Take a look at the first few rows
head(hr_data)
# Convert categorical variables to factors with meaningful labels
hr_data <- hr_data %>%
mutate(
ethnicity = factor(ethnicity,
levels = 0:4,
labels = c("White", "Black", "Asian", "Latino", "Other")),
gender = factor(gender,
levels = 1:2,
labels = c("Female", "Male")),
job_role = factor(job_role,
levels = 0:9,
labels = c("Administration", "Customer Service", "Finance",
"Human Resources", "IT", "Marketing",
"Operations", "Sales", "Research", "Executive"))
)
# Check the structure of the data after transformation
glimpse(hr_data)
# Get summary statistics for numeric variables
hr_data %>%
select(age, tenure, salarygrade, evaluation, job_satisfaction, intentionto_quit) %>%
summary()
# Create visualizations of key variables
p1 <- ggplot(hr_data, aes(x = gender, fill = gender)) +
geom_bar() +
scale_fill_manual(values = c("Female" = "#FF9999", "Male" = "#6699CC")) +
theme_minimal() +
labs(title = "Gender Distribution") +
theme(legend.position = "none")
p2 <- ggplot(hr_data, aes(x = tenure)) +
geom_histogram(bins = 10, fill = "steelblue") +
theme_minimal() +
labs(title = "Years of Experience",
x = "Tenure (years)",
y = "Count")
p3 <- ggplot(hr_data, aes(x = evaluation)) +
geom_histogram(bins = 5, fill = "darkgreen") +
theme_minimal() +
labs(title = "Performance Rating Distribution",
x = "Evaluation Score (1-5)",
y = "Count")
p4 <- ggplot(hr_data, aes(x = salarygrade)) +
geom_histogram(bins = 5, fill = "darkred") +
theme_minimal() +
labs(title = "Salary Grade Distribution",
x = "Salary Grade",
y = "Count")
# Combine the plots using patchwork
(p1 + p2) / (p3 + p4)
# Examine distribution across job roles
ggplot(hr_data, aes(x = job_role, fill = job_role)) +
geom_bar() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
labs(title = "Distribution of Employees Across Job Roles",
x = "Job Role",
y = "Count")
# Create a correlation matrix for numeric variables
hr_data %>%
select(age, tenure, salarygrade, evaluation, job_satisfaction, intention_to_quit) %>%
cor() %>%
round(2) %>%
kable(caption = "Correlation Matrix of Numeric Variables")
# Create a correlation matrix for numeric variables
hr_data %>%
select(age, tenure, salarygrade, evaluation, job_satisfaction, intentionto_quit) %>%
cor() %>%
round(2) %>%
kable(caption = "Correlation Matrix of Numeric Variables")
# Visualize relationships between key variables
ggplot(hr_data, aes(x = tenure, y = salarygrade, color = gender)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = TRUE) +
scale_color_manual(values = c("Female" = "#FF9999", "Male" = "#6699CC")) +
theme_minimal() +
labs(title = "Relationship Between Experience and Salary by Gender",
x = "Years of Experience",
y = "Salary Grade")
# Create a visualization showing the confusion
set.seed(123)
# Create a network visualization
tests <- c("t-test", "ANOVA", "Correlation", "Regression", "Chi-square", "MANOVA")
questions <- c("Compare 2 groups?", "Look at relationships?", "Compare multiple groups?",
"Make predictions?", "Test against a standard?", "Test categorical data?")
# Create nodes for tests and questions
nodes <- data.frame(
id = 1:12,
label = c(tests, questions),
type = c(rep("test", length(tests)), rep("question", length(questions))),
x = c(rep(1, length(tests)), rep(4, length(questions))),
y = c(seq(1, length(tests)), seq(1, length(questions)))
)
# Create connections between tests and questions
edges <- data.frame(
from = c(sample(1:6, 10, replace = TRUE)),
to = c(sample(7:12, 10, replace = TRUE))
)
# Plot
ggplot() +
# Draw edges as curved lines
geom_curve(data = edges, aes(x = nodes$x[from], y = nodes$y[from],
xend = nodes$x[to], yend = nodes$y[to]),
curvature = 0.3, color = "gray70", size = 0.7, alpha = 0.6) +
# Draw nodes
geom_point(data = nodes, aes(x = x, y = y, color = type), size = 12) +
# Add labels
geom_text(data = nodes, aes(x = x, y = y, label = label), size = 3) +
# Custom styling
scale_color_manual(values = c("question" = "steelblue", "test" = "darkred")) +
theme_void() +
theme(legend.position = "none") +
labs(title = "The Statistical Test Dilemma",
subtitle = "Which test should I use for which question?")
# Create a visualization showing traditional vs. unified approach
# Create data for the plot
traditional <- data.frame(
x = c(1, 2, 3, 4, 5),
y = rep(1, 5),
labels = c("t-test", "ANOVA", "Correlation", "Regression", "Chi-square")
)
unified <- data.frame(
x = c(1, 2, 3, 4, 5),
y = rep(2, 5),
labels = c("t-test", "ANOVA", "Correlation", "Regression", "Chi-square")
)
center <- data.frame(
x = 3,
y = 3,
labels = "General\nLinear\nModel"
)
# Create the plot
ggplot() +
# Traditional approach - isolated islands
geom_point(data = traditional, aes(x = x, y = y), size = 22, color = "steelblue", alpha = 0.7) +
geom_text(data = traditional, aes(x = x, y = y, label = labels), size = 3.5) +
# Unified approach - connected to central framework
geom_point(data = unified, aes(x = x, y = y), size = 22, color = "steelblue", alpha = 0.7) +
geom_text(data = unified, aes(x = x, y = y, label = labels), size = 3.5) +
# Connections to central framework
geom_segment(aes(x = unified$x, y = unified$y + 0.3,
xend = center$x, yend = center$y - 0.3),
arrow = arrow(length = unit(0.2, "cm")), size = 0.7) +
# Central framework
geom_point(data = center, aes(x = x, y = y), size = 28, color = "darkred", alpha = 0.7) +
geom_text(data = center, aes(x = x, y = y, label = labels), size = 4, color = "white") +
# Labels for the approaches
annotate("text", x = 0.5, y = 1, label = "Traditional Approach:",
hjust = 0, size = 5, fontface = "bold") +
annotate("text", x = 0.5, y = 2, label = "Unified Approach:",
hjust = 0, size = 5, fontface = "bold") +
# Formatting
theme_void() +
annotate("text", x = 3, y = 0.3,
label = "Each test exists as a separate island with its own rules and procedures",
size = 4) +
annotate("text", x = 3, y = 3.8,
label = "All tests are connected through a common underlying framework",
size = 4) +
coord_cartesian(xlim = c(0, 6), ylim = c(0, 4))
# Create a visualization showing traditional vs. unified approach
# Create data for the plot
traditional <- data.frame(
x = c(1, 2, 3, 4, 5),
y = rep(1, 5),
labels = c("t-test", "ANOVA", "Correlation", "Regression", "Chi-square")
)
unified <- data.frame(
x = c(1, 2, 3, 4, 5),
y = rep(2, 5),
labels = c("t-test", "ANOVA", "Correlation", "Regression", "Chi-square")
)
center <- data.frame(
x = 3,
y = 3,
labels = "General\nLinear\nModel"
)
# Create the plot
ggplot() +
# Traditional approach - isolated islands
geom_point(data = traditional, aes(x = x, y = y), size = 22, color = "steelblue", alpha = 0.7) +
geom_text(data = traditional, aes(x = x, y = y, label = labels), size = 3.5) +
# Unified approach - connected to central framework
geom_point(data = unified, aes(x = x, y = y), size = 22, color = "steelblue", alpha = 0.7) +
geom_text(data = unified, aes(x = x, y = y, label = labels), size = 3.5) +
# Connections to central framework
geom_segment(
aes(
x = unified$x, y = unified$y + 0.3,
xend = center$x, yend = center$y - 0.3
),
arrow = arrow(length = unit(0.2, "cm")), size = 0.7
) +
# Central framework
geom_point(data = center, aes(x = x, y = y), size = 28, color = "darkred", alpha = 0.7) +
geom_text(data = center, aes(x = x, y = y, label = labels), size = 4, color = "white") +
# Labels for the approaches
annotate("text",
x = 0.5, y = 1, label = "Traditional Approach:",
hjust = 0, size = 5, fontface = "bold"
) +
annotate("text",
x = 0.5, y = 2, label = "Unified Approach:",
hjust = 0, size = 5, fontface = "bold"
) +
# Formatting
theme_void() +
annotate("text",
x = 3, y = 0.3,
label = "Each test exists as a separate island with its own rules and procedures",
size = 4
) +
annotate("text",
x = 3, y = 3.8,
label = "All tests are connected through a common underlying framework",
size = 4
) +
coord_cartesian(xlim = c(0, 6), ylim = c(0, 4))
# Create a visualization showing traditional vs. unified approach
# Create data for the plot
traditional <- data.frame(
x = c(1, 2, 3, 4, 5),
y = rep(1, 5),
labels = c("t-test", "ANOVA", "Correlation", "Regression", "Chi-square")
)
unified <- data.frame(
x = c(1, 2, 3, 4, 5),
y = rep(2, 5),
labels = c("t-test", "ANOVA", "Correlation", "Regression", "Chi-square")
)
center <- data.frame(
x = 3,
y = 3,
labels = "General\nLinear\nModel"
)
# Create the plot
ggplot() +
# Traditional approach - isolated islands
geom_point(data = traditional, aes(x = x, y = y), size = 22, color = "steelblue", alpha = 0.7) +
geom_text(data = traditional, aes(x = x, y = y, label = labels), size = 3.5) +
# Unified approach - connected to central framework
geom_point(data = unified, aes(x = x, y = y), size = 22, color = "steelblue", alpha = 0.7) +
geom_text(data = unified, aes(x = x, y = y, label = labels), size = 3.5) +
# Connections to central framework
geom_segment(
aes(
x = unified$x, y = unified$y + 0.3,
xend = center$x, yend = center$y - 0.3
),
arrow = arrow(length = unit(0.2, "cm")), size = 0.7
) +
# Central framework
geom_point(data = center, aes(x = x, y = y), size = 28, color = "darkred", alpha = 0.7) +
geom_text(data = center, aes(x = x, y = y, label = labels), size = 4, color = "white") +
# Labels for the approaches
annotate("text",
x = 0.5, y = 1, label = "Traditional Approach:",
hjust = 0, size = 5, fontface = "bold"
) +
annotate("text",
x = 0.5, y = 2, label = "Unified Approach:",
hjust = 0, size = 5, fontface = "bold"
) +
# Formatting
theme_void() +
annotate("text",
x = 3, y = 0.3,
label = "Each test exists as a separate island with its own rules and procedures",
size = 4
) +
annotate("text",
x = 3, y = 3.8,
label = "All tests are connected through a common underlying framework",
size = 4
) +
coord_cartesian(xlim = c(0, 6), ylim = c(0, 4))
# Create an image showing tests as special cases
library(DiagrammeR)
library(htmltools)
graph <- grViz("
digraph GLM {
# Node attributes
node [shape = rectangle, style = filled, fillcolor = steelblue, fontcolor = white,
width = 2, height = 0.8, fontname = 'Helvetica', fontsize = 12];
# Edge attributes
edge [color = gray30, arrowsize = 0.8];
# Nodes
GLM [label = 'General Linear Model', fillcolor = darkred, fontsize = 14];
reg [label = 'Regression'];
anova [label = 'ANOVA'];
ttest [label = 't-tests'];
corr [label = 'Correlation'];
# Sub-nodes
simple [label = 'Simple Regression'];
multiple [label = 'Multiple Regression'];
oneway [label = 'One-way ANOVA'];
twoway [label = 'Two-way ANOVA'];
onesample [label = 'One-sample t-test'];
independent [label = 'Independent t-test'];
paired [label = 'Paired t-test'];
pearson [label = 'Pearson Correlation'];
spearman [label = 'Spearman Correlation'];
# Edges
GLM -> {reg anova ttest corr};
reg -> {simple multiple};
anova -> {oneway twoway};
ttest -> {onesample independent paired};
corr -> {pearson spearman};
}
")
# Convert to HTML and display
html_print(graph)
