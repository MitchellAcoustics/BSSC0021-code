)
means_table
means_table <- means_table |>
gather(key = "automation_risk", value = "sample_mean")
means_table
# Create a plot comparing the distributions
ggplot(means_table, aes(x = sample_mean, color = automation_risk)) +
geom_histogram(alpha = 0.5) +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Job Title",
x = "Mean Salary (USD)",
y = "Count",
fill = "Job Title"
)
# Create a plot comparing the distributions
ggplot(means_table, aes(x = sample_mean, fill = automation_risk)) +
geom_histogram(alpha = 0.5) +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Job Title",
x = "Mean Salary (USD)",
y = "Count",
fill = "Job Title"
)
# Create a plot comparing the distributions
ggplot(means_table, aes(y = sample_mean, x = automation_risk)) +
geom_boxplot() +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
x = "Mean Salary (USD)",
y = "Count",
fill = "Automation Risk"
)
# Create a plot comparing the distributions
ggplot(means_table, aes(y = sample_mean, x = automation_risk)) +
geom_boxplot() +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
y = "Mean Salary (USD)",
x = "Automation Risk",
)
sample_size <- 25
n_samples <- 1000
# Set up an empty list to add to
high_sample_means <- c()
for (i in 1:n_samples) {
# Sample the High automation risk observations
mean <- ai_jobs |>
filter(automation_risk == "High") |>
sample_n(sample_size) |>
summarise(mean(salary_usd)) |>
pull()
# Add to the sample_means list
high_sample_means <- append(high_sample_means, mean)
}
# Repeat for the Low risk group
low_sample_means <- c()
for (i in 1:n_samples) {
# Sample the High automation risk observations
mean <- ai_jobs |>
filter(automation_risk == "Low") |>
sample_n(sample_size) |>
summarise(mean(salary_usd)) |>
pull()
# Add to the sample_means list
low_sample_means <- append(low_sample_means, mean)
}
means_table <- tibble(
"High" = high_sample_means,
"Low" = low_sample_means,
)
means_table
means_table <- means_table |>
gather(key = "automation_risk", value = "sample_mean")
means_table
# Create a plot comparing the distributions
ggplot(means_table, aes(x = sample_mean, fill = automation_risk)) +
geom_histogram(alpha = 0.5) +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
x = "Mean Salary (USD)",
y = "Count",
fill = "Automation Risk"
)
# Create a plot comparing the distributions
ggplot(means_table, aes(y = sample_mean, x = automation_risk)) +
geom_boxplot() +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
y = "Mean Salary (USD)",
x = "Automation Risk",
)
?geom_boxplot
# Create a plot comparing the distributions
ggplot(means_table, aes(y = sample_mean, x = automation_risk)) +
geom_boxplot(notch=TRUE) +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
y = "Mean Salary (USD)",
x = "Automation Risk",
)
# Create a plot comparing the distributions
ggplot(means_table, aes(y = sample_mean, x = automation_risk)) +
geom_violin() +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
y = "Mean Salary (USD)",
x = "Automation Risk",
)
?geom_violin
# Create a plot comparing the distributions
ggplot(means_table, aes(y = sample_mean, x = automation_risk)) +
geom_boxplot(color=automation_risk) +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
y = "Mean Salary (USD)",
x = "Automation Risk",
)
# Create a plot comparing the distributions
ggplot(means_table, aes(y = sample_mean, x = automation_risk, color=automation_risk)) +
geom_boxplot() +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
y = "Mean Salary (USD)",
x = "Automation Risk",
)
# Create a plot comparing the distributions
ggplot(means_table, aes(y = sample_mean, x = automation_risk, color=automation_risk)) +
geom_boxplot() +
geom_jitter() +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
y = "Mean Salary (USD)",
x = "Automation Risk",
)
# Create a plot comparing the distributions
ggplot(means_table, aes(y = sample_mean, x = automation_risk, color=automation_risk)) +
geom_boxplot() +
geom_jitter(width=0.2) +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
y = "Mean Salary (USD)",
x = "Automation Risk",
)
# Create a plot comparing the distributions
ggplot(means_table, aes(y = sample_mean, x = automation_risk, color=automation_risk)) +
geom_boxplot() +
geom_jitter(width=0.1) +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
y = "Mean Salary (USD)",
x = "Automation Risk",
)
# Create a plot comparing the distributions
ggplot(means_table, aes(y = sample_mean, x = automation_risk, color=automation_risk)) +
geom_boxplot() +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
y = "Mean Salary (USD)",
x = "Automation Risk",
)
# Create a plot comparing the distributions
ggplot(means_table, aes(y = sample_mean, x = automation_risk, color=automation_risk)) +
geom_point() +
geom_errorbar() +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
y = "Mean Salary (USD)",
x = "Automation Risk",
)
?geom_errorbar
summary_stats <- means_table |>
group_by(automation_risk) |>
summarise(
mean=mean(sample_mean),
sd = sd(sample_mean)
)
summary_stats
summary_stats$sd
# Create a plot comparing the distributions
summary_stats <- means_table |>
group_by(automation_risk) |>
summarise(
mean=mean(sample_mean),
sd = sd(sample_mean)
)
ggplot(means_table, aes(y = sample_mean, x = automation_risk, color=automation_risk)) +
geom_point() +
geom_errorbar(aes(ymin=summary_stats$mean-summary_stats$sd, ymax=summary_stats$mean+summary_stats$sd)) +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
y = "Mean Salary (USD)",
x = "Automation Risk",
)
means_table
summary_stats
# Create a plot comparing the distributions
means_table |>
group_by(automation_risk) |>
summarise(
mean=mean(sample_mean),
sd = sd(sample_mean)
) |>
ggplot(aes(y = mean, x = automation_risk, color=automation_risk)) +
geom_point() +
geom_errorbar(aes(ymin=mean-(2*sd), ymax=mean+(2*sd))) +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
y = "Mean Salary (USD)",
x = "Automation Risk",
)
sample_size <- 50
n_samples <- 1000
# Set up an empty list to add to
high_sample_means <- c()
for (i in 1:n_samples) {
# Sample the High automation risk observations
mean <- ai_jobs |>
filter(automation_risk == "High") |>
sample_n(sample_size) |>
summarise(mean(salary_usd)) |>
pull()
# Add to the sample_means list
high_sample_means <- append(high_sample_means, mean)
}
# Repeat for the Low risk group
low_sample_means <- c()
for (i in 1:n_samples) {
# Sample the High automation risk observations
mean <- ai_jobs |>
filter(automation_risk == "Low") |>
sample_n(sample_size) |>
summarise(mean(salary_usd)) |>
pull()
# Add to the sample_means list
low_sample_means <- append(low_sample_means, mean)
}
means_table <- tibble(
"High" = high_sample_means,
"Low" = low_sample_means,
)
means_table
means_table <- means_table |>
gather(key = "automation_risk", value = "sample_mean")
means_table
# Create a plot comparing the distributions
ggplot(means_table, aes(x = sample_mean, fill = automation_risk)) +
geom_histogram(alpha = 0.5) +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
x = "Mean Salary (USD)",
y = "Count",
fill = "Automation Risk"
)
# Create a plot comparing the distributions
means_table |>
group_by(automation_risk) |>
summarise(
mean=mean(sample_mean),
sd = sd(sample_mean)
) |>
ggplot(aes(y = mean, x = automation_risk, color=automation_risk)) +
geom_point() +
geom_errorbar(aes(ymin=mean-(2*sd), ymax=mean+(2*sd))) +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
y = "Mean Salary (USD)",
x = "Automation Risk",
)
# Start by drawing a new sample of 50 from each group
ai_jobs |>
filter(automation_risk == "High") |>
sample_n(sample_size)
# Start by drawing a new sample of 50 from each group
ai_jobs |>
filter(automation_risk == "High") |>
sample_n(sample_size) |>
pull(salary_usd)
# Start by drawing a new sample of 50 from each group
high_sample <- ai_jobs |>
filter(automation_risk == "High") |>
sample_n(sample_size) |>
pull(salary_usd)
low_sample <- ai_jobs |>
filter(automation_risk == "Low") |>
sample_n(sample_size) |>
pull(salary_usd)
# Run the t-test
t.test(high_sample, low_sample)
library(tidyverse)
ai_jobs <- read_csv("data/ai_jobs.csv")
# Let's take a look at what job titles we have
ai_jobs |>
count(job_title) |>
arrange(desc(n))
sample_size <- 50
n_samples <- 1000
# Set up an empty list to add to
high_sample_means <- c()
for (i in 1:n_samples) {
# Sample the High automation risk observations
mean <- ai_jobs |>
filter(automation_risk == "High") |>
sample_n(sample_size) |>
summarise(mean(salary_usd)) |>
pull()
# Add to the sample_means list
high_sample_means <- append(high_sample_means, mean)
}
# Repeat for the Low risk group
low_sample_means <- c()
for (i in 1:n_samples) {
# Sample the High automation risk observations
mean <- ai_jobs |>
filter(automation_risk == "Low") |>
sample_n(sample_size) |>
summarise(mean(salary_usd)) |>
pull()
# Add to the sample_means list
low_sample_means <- append(low_sample_means, mean)
}
means_table <- tibble(
"High" = high_sample_means,
"Low" = low_sample_means,
)
means_table
means_table <- tibble(
"High" = high_sample_means,
"Low" = low_sample_means,
)
means_table
means_table <- tibble(
"High" = high_sample_means,
"Low" = low_sample_means,
)
means_table
means_table <- means_table |>
gather(key = "automation_risk", value = "sample_mean")
means_table
# Create a plot comparing the distributions
ggplot(means_table, aes(x = sample_mean, fill = automation_risk)) +
geom_histogram(alpha = 0.5) +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
x = "Mean Salary (USD)",
y = "Count",
fill = "Automation Risk"
)
# Create a plot comparing the distributions
# We need to start by calculating the mean and
# standard deviation of the sampling distributions
# to pass to the errorbar layer:
means_table |>
group_by(automation_risk) |>
summarise(
mean = mean(sample_mean),
sd = sd(sample_mean)
) |>
ggplot(aes(y = mean, x = automation_risk, color = automation_risk)) +
geom_point() +
geom_errorbar(aes(ymin = mean - (2 * sd), ymax = mean + (2 * sd))) +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
y = "Mean Salary (USD)",
x = "Automation Risk",
)
# Create a plot comparing the distributions
# We need to start by calculating the mean and
# standard deviation of the sampling distributions
# to pass to the errorbar layer:
means_table |>
group_by(automation_risk) |>
summarise(
mean = mean(sample_mean),
sd = sd(sample_mean)
) |>
ggplot(aes(y = mean, x = automation_risk, color = automation_risk)) +
geom_point() +
geom_errorbar(aes(ymin = mean - (2 * sd), ymax = mean + (2 * sd))) +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
x = "Automation Risk",
) +
scale_y_continuous(namez = "Mean Salary (USD)", labels=scales::comma)
# Create a plot comparing the distributions
# We need to start by calculating the mean and
# standard deviation of the sampling distributions
# to pass to the errorbar layer:
means_table |>
group_by(automation_risk) |>
summarise(
mean = mean(sample_mean),
sd = sd(sample_mean)
) |>
ggplot(aes(y = mean, x = automation_risk, color = automation_risk)) +
geom_point() +
geom_errorbar(aes(ymin = mean - (2 * sd), ymax = mean + (2 * sd))) +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
x = "Automation Risk",
) +
scale_y_continuous(name = "Mean Salary (USD)", labels=scales::comma)
# Create a plot comparing the distributions
p <- ggplot(means_table, aes(x = sample_mean, fill = automation_risk)) +
geom_histogram(alpha = 0.5) +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
x = "Mean Salary (USD)",
y = "Count",
fill = "Automation Risk"
)
p
# Create a plot comparing the distributions
# We need to start by calculating the mean and
# standard deviation of the sampling distributions
# to pass to the errorbar layer:
summary_stats <- means_table |>
group_by(automation_risk) |>
summarise(
mean = mean(sample_mean),
sd = sd(sample_mean)
)
p + ggplot(summary_stats, aes(y = mean, x = automation_risk, color = automation_risk)) +
geom_point() +
geom_errorbar(aes(ymin = mean - (2 * sd), ymax = mean + (2 * sd))) +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
x = "Automation Risk",
) +
scale_y_continuous(name = "Mean Salary (USD)", labels=scales::comma)
# Create a plot comparing the distributions
# We need to start by calculating the mean and
# standard deviation of the sampling distributions
# to pass to the errorbar layer:
summary_stats <- means_table |>
group_by(automation_risk) |>
summarise(
mean = mean(sample_mean),
sd = sd(sample_mean)
) |>
ggplot(aes(y = mean, x = automation_risk, color = automation_risk)) +
geom_point() +
geom_errorbar(aes(ymin = mean - (2 * sd), ymax = mean + (2 * sd))) +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
x = "Automation Risk",
) +
scale_y_continuous(name = "Mean Salary (USD)", labels=scales::comma)
# Create a plot comparing the distributions
ggplot(means_table, aes(x = sample_mean, fill = automation_risk)) +
geom_histogram(alpha = 0.5) +
theme_minimal() +
labs(
title = "Distribution of Sample Means by Automation Risk",
x = "Mean Salary (USD)",
y = "Count",
fill = "Automation Risk"
)
# Start by drawing a new sample of 50 from each group
high_sample <- ai_jobs |>
filter(automation_risk == "High") |>
sample_n(sample_size) |>
pull(salary_usd)
low_sample <- ai_jobs |>
filter(automation_risk == "Low") |>
sample_n(sample_size) |>
pull(salary_usd)
# Run the t-test
t.test(high_sample, low_sample)
library(tidyverse)
sample_1 <- c(83.2, 82.6, 82.6, 82.6, 93.2, 94, 94, 48.5, 33.6, 33.6)
sample_2 <- c(48.8, 86.5, 67.5, 84.5, 97.6, 92, 60.7, 108, 84.3, 58.5)
sample_3 <- c(128, 53.7, 70.9, 75.2, 84.9, 91.2, 70.2, 82, 88.8, 82)
sample_2
mean_1 <- mean(sample_1)
mean_2 <- mean(sample_2)
mean_3 <- mean(sample_3)
sample_means <- tibble(mean_values = c(mean_1, mean_2, mean_3))
sample_means
ggplot(sample_means, mapping = aes(x = mean_values)) +
geom_histogram() +
theme_minimal() +
labs(
title = "Distribution of Sample Means",
x = "Mean Value",
y = "Count"
)
